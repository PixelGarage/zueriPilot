<?php
/**
 * Module file to implement a stripe button.
 * @file
 */

define('STRIPE_CHECKOUT_JS_PATH', 'https://checkout.stripe.com/checkout.js');



/* =============================================================================
 *   Stripe checkout callback
 * ========================================================================== */
/**
 * Implements hook_menu().
 */
function stripe_button_menu() {
  // handles AJAX token request
  $items['stripe/ajax/token'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'stripe_button_token_callback',
  );

  // handles AJAX stripe button request
  $items['stripe/ajax/button'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'stripe_button_custom_form_callback',
  );
  return $items;
}

/**
 * AJAX callback function of the stripe token creation.
 */
function stripe_button_token_callback() {
  // load stripe php library
  $library = libraries_load('stripe');
  if (!$library['loaded']) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
    print '<div class="stripe-message">' . t("NO charge!\nStripe API missing") . '</div>';
    drupal_exit();
  }

  // set the private API key
  $account = $_POST['account'];
  \Stripe\Stripe::setApiKey(_stripe_api_secret_key(null, $account));

  // get the credit card details
  $token = $_POST['stripeToken'];
  $button_id = $_POST['btnID'];
  $amount = $_POST['amount'];
  $currency = $_POST['currency'];
  $email = $_POST['email'];
  $date = date('r'); // e.g. Thu, 21 Dec 2000 16:01:07 +0200
  $desc = t('@site charged you (@user) with @amount @curr on @date', array(
    '@site' => variable_get('site_name'),
    '@user' => $email,
    '@amount' => $amount/100, // amount in francs again
    '@curr' => $currency,
    '@date' => $date,
  ));

  // Create the charge - this will charge the user's card
  $msg = false;
  try {
    $charge = \Stripe\Charge::create(array(
      "amount" => $amount,
      "currency" => $currency,
      "source" => $token,
      "description" => $desc,
      "receipt_email" => $email
    ));
  }
  catch(\Stripe\Error\Card $e) {
    // The card has been declined
    $e_json = $e->getJsonBody();
    $error = $e_json['error'];
    $msg = t($error['message']);
  }
  catch(\Stripe\Error\Base $e) {
    $e_json = $e->getJsonBody();
    $error = $e_json['error'];
    $msg = t($error['message']);
  }

  // create button (amount > 0 means normal button, amount == 0 means success button, amount < 0 means failure button)
  $success = !$msg ? 0 : -1;
  $button = theme('stripe_button_fix_value', array(
      'id' => $button_id,
      'amount' => $success,
      'currency' => $currency,
      'message' => $msg,
    )
  );

  // create error message
  //$errorMsg  = $msg ? '<div class="label label-warning stripe-message">' . t("Error: @msg", array('@msg'=>$msg)) . '</div>' : '';

  // send answer to client
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print $button;
  //print $errorMsg;
  drupal_exit();
}

/**
 * AJAX callback of the stripe button custom form.
 */
function stripe_button_custom_form_callback () {
  // update the user specified amount
  $button_id = $_POST['btnID'];
  $new_amount = $_POST['newAmount'];
  $currency = $_POST['currency'];

  // create predefined stripe button with the new user amount
  $button = theme('stripe_button_fix_value', array(
      'id' => $button_id,
      'amount' => $new_amount,
      'currency' => $currency,
    )
  );

  // send answer to client
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print $button;
  drupal_exit();
}

/* =============================================================================
 *   Stripe button themes
 * ========================================================================== */
/**
 * Session wide data container.
 *
 * @return array Returns the session data array.
 */
function &stripe_button_session_data() {
  if (!isset($_SESSION['stripe_button'])) {
    $_SESSION['stripe_button'] = array();
  }
  return $_SESSION['stripe_button'];
}

/**
 * Implements hook_theme().
 */
function stripe_button_theme($existing, $type, $theme, $path) {
  return array(
    'stripe_button_fix_value' => array(
      'function' => 'theme_stripe_button_fix_value',
      'variables' => array(
        'id' => NULL,
        'amount' => NULL,
        'currency' => NULL,
        'csp' => FALSE,
        'message' => NULL,
      ),
    ),
    'stripe_button_custom_value' => array(
      'function' => 'theme_stripe_button_custom_value',
      'variables' => array(
        'id' => NULL,
        'amount' => NULL,
        'currency' => NULL,
        'csp' => FALSE,
      ),
    ),
  );
}

/**
 * Themes a Stripe Checkout button with a predefined amount in a given currency.
 */
function theme_stripe_button_fix_value($variables) {
  // Render Stripe Checkout button
  if ($variables['amount'] > 0) {
    //
    // Create initial button
    // Enforce strict content security policy
    if ($variables['csp'] == TRUE) {
      header("Content-Security-Policy: default-src 'self' https://checkout.stripe.com;");
    }

    // create HTML button
    $currency = strtoupper($variables['currency']);
    $amount = $variables['amount'] * 100 / 100; // no decimal value if not needed
    $label = t('@amount @currency', array('@amount' => $amount, '@currency' => $currency));
    $output = '<button id="' . $variables['id'] . '" type="button"' .
      ' class="btn btn-normal stripe-button">' .
      $label .
      '</button>';
  }
  else if ($variables['amount'] == 0) {
    //
    // successful payment, create success button (disabled)
    $label = t("Yes");
    $output = '<button id="' . $variables['id'] . '" type="button"' .
      ' class="btn btn-success stripe-button" disabled>' .
      '<span class="fa fa-check"></span>' . $label .
      '</button>';
  }
  else {
    //
    // failed payment, create fail button (disabled)
    $label = t("No");
    $output = '<button id="' . $variables['id'] . '" type="button"' .
      ' class="btn btn-warning stripe-button" data-toggle="popover" data-trigger="hover" data-placement="auto bottom"'.
      ' title="Stripe Error" data-content="' . $variables['message']. '">' .
      '<span class="fa fa-times"></span>' . $label .
      '</button>';
  }

  return $output;
}



/**
 * Themes a Stripe Checkout button with a customizable amount in a given currency.
 *
 * The custom button is an AJAX form collecting a user defined amount. The process:
 * 1) The form submission sends the collected amount to the server
 * 2) a predefined Stripe button with the given value is created and sent back to the client browser
 * 3) The button is clicked programmatically in the AJAX response.
 * 4) The predefined button process starts.
 */
function theme_stripe_button_custom_value($variables) {
  // store theme variables in session
  $session_data = &stripe_button_session_data();
  $session_data['button_id'] = $variables['id'];
  $session_data['amount'] = $variables['amount'];
  $session_data['currency'] = $variables['currency'];

  // create custom amount form
  $render_form = drupal_get_form('stripe_button_custom_form');
  $output = drupal_render($render_form);

  return $output;
}

/**
 * Creates the form presenting a customizable amount field and button.
 */
function stripe_button_custom_form($form, &$form_state) {
  // get form values
  $session_data = &stripe_button_session_data();
  $form_id = $session_data['button_id'];
  $amount = $session_data['amount'];
  $currency = $session_data['currency'];
  unset($session_data['button_id']);
  unset($session_data['amount']);
  unset($session_data['currency']);

  // add wrapper to entire form
  $form['#prefix'] = '<div id="form-' . $form_id . '">';
  $form['#suffix'] = '</div>';
  $form['stripe_button_custom_amount'] = array(
    '#type' => 'textfield',
    '#default_value' => $amount,
    '#title' => t('Amount'),
    '#title_display' => 'invisible',
    '#size' => 7,
    '#weight' => 0,
    '#prefix' => '<div class="input-group"><div class="input-group-addon">'. $currency . '</div>',
    '#suffix' => '</div>',
  );
  $form['stripe_button_custom_submit'] = array(
    '#type' => 'button',
    '#value' => t('Pay'),
    '#weight' => 1,
  );

  return $form;
}



/* =============================================================================
 *   DecimalNumber formatter (as Stripe button)
 * ========================================================================== */
/**
 * Implements hook_field_formatter_info().
 *
 * Two formatters for the decimal number field are added:
 *    stripe_button:  This formatter displays and charges a fixed value via the Stripe payment gateway.
 *    stripe_button_custom:  This formatter displays a user definable value via the Stripe payment gateway.
 **/
function stripe_button_field_formatter_info() {
  return array(
    'stripe_button_fixed' => array(
      'label' => t('Predefined value stripe button'),
      'field types' => array('number_decimal'),
      'settings'  => array(
        // Array of the settings to be defined
        'stripe_button_name' => '',
        'stripe_button_description' => '',
        'stripe_button_currency' => 'CHF',
        'stripe_button_label' => '',
        'stripe_button_billing' => 0,
        'stripe_button_shipping' => 0,
        'stripe_button_remember' => 0,
      ),
    ),
    'stripe_button_custom' => array(
      'label' => t('Custom value stripe button'),
      'field types' => array('number_decimal'),
      'settings'  => array(
        // Array of the settings to be defined
        'stripe_button_name' => '',
        'stripe_button_description' => '',
        'stripe_button_currency' => 'CHF',
        'stripe_button_label' => '',
        'stripe_button_billing' => 0,
        'stripe_button_shipping' => 0,
        'stripe_button_remember' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function stripe_button_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'stripe_button_fixed' || $display['type'] == 'stripe_button_custom') {
    $options = array(
      'CHF'  => t('CHF'),
      'EUR' => t('EUR'),
      'USD' => t('USD'),
      'GBP' => t('GBP'),
      'DKK' => t('DKK'),
      'NOK' => t('NOK'),
      'SEK' => t('SEK'),
      'AUD' => t('AUD'),
      'CAD' => t('CAD'),
    );
    $element['stripe_button_currency'] = array(
      '#type' => 'select',
      '#title' => t('Currency'),
      '#options' => $options,
      '#default_value' => $settings['stripe_button_currency'],
    );
    $element['stripe_button_name'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Company name'),
      '#default_value' => $settings['stripe_button_name'],
      '#description'   => t('Define the company name shown in the dialog. Default: Site name'),
    );
    $element['stripe_button_description'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Description'),
      '#default_value' => $settings['stripe_button_description'],
      '#description'   => t('Define the description shown in the dialog. Default: none'),
    );
    $element['stripe_button_label'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Button label'),
      '#default_value' => $settings['stripe_button_label'],
      '#description'   => t("Define the button label of the Stripe dialog submit button. Default: none"),
    );
    $element['stripe_button_billing'] = array(
      '#type' => 'checkbox',
      '#title' => t("Collect user's billing address."),
      '#default_value' => $settings['stripe_button_billing'],
      '#description'   => t("Specify whether Checkout should collect the user's billing address. Default: false"),
    );
    $element['stripe_button_shipping'] = array(
      '#type' => 'checkbox',
      '#title' => t("Collect user's shipping address."),
      '#default_value' => $settings['stripe_button_shipping'],
      '#description'   => t("Specify whether Checkout should collect the user's shipping address. Default: false"),
    );
    $element['stripe_button_remember'] = array(
      '#type' => 'checkbox',
      '#title' => t('Remember the customer.'),
      '#default_value' => $settings['stripe_button_remember'],
      '#description'   => t("Specify whether to include the option to 'Remember Me' for future purchases (one click payment). Default: false"),
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function stripe_button_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  if ($display['type'] == 'stripe_button_fixed' || $display['type'] == 'stripe_button_custom') {
    $summary[] = t('Currency:             @curr', array('@curr' => $settings['stripe_button_currency']));
    $summary[] = t('Company name:         @name', array('@name' => $settings['stripe_button_name']));
    $summary[] = t('Product description:  @desc', array('@desc' => $settings['stripe_button_description']));
    $summary[] = t('Billing address:      @desc', array('@desc' => ($settings['stripe_button_billing'] == 1) ? 'yes' : 'no'));
    $summary[] = t('Shipping address:     @desc', array('@desc' => ($settings['stripe_button_shipping'] == 1) ? 'yes' : 'no'));
    $summary[] = t('Remember user:        @desc', array('@desc' => ($settings['stripe_button_remember'] == 1) ? 'yes' : 'no'));
    $summary[] = t('Button label:         @curr', array('@curr' => $settings['stripe_button_label']));
  }

  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 *
 * A Stripe button formatter for a number field is implemented.
 *
 */
function stripe_button_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  $field_name = $instance['field_name'];

  // create drupal settings array
  $logo_path = theme_get_setting('logo_path', 'pixelgarage');
  $site_name = variable_get('site_name');
  $account = _stripe_api_account_selector();
  $js_settings = array (
    'stripe_button' => array(
      'stripe_public_key' => _stripe_api_public_key(null, $account),
      'account' => $account,
      'name' => $settings['stripe_button_name'] ? t($settings['stripe_button_name']) : $site_name,
      'icon' => $logo_path ? file_create_url($logo_path) : '',
    ),
  );

  // create stripe button render array
  $stripe_buttons = array();
  $custom_buttons = array();
  $button_settings = array(
    'description' => $settings['stripe_button_description'] ? t($settings['stripe_button_description']) : '',
    'currency' => $settings['stripe_button_currency'],
    'buttonLabel' => $settings['stripe_button_label'] ? t($settings['stripe_button_label']) : '',
    'zipCode' => 0,
    'billingAddress' => $settings['stripe_button_billing'],
    'shippingAddress' => $settings['stripe_button_shipping'],
    'allowRememberMe' => $settings['stripe_button_remember'],
  );
  switch ($display['type']) {
    // This formatter outputs a button with the number as label.
    case 'stripe_button_fixed':
      foreach ($items as $delta => $item) {
        // set button specific values
        $amount = $item['value'];
        $button_id = drupal_clean_css_identifier($field_name . '-' . $delta);

        // add button with its settings
        $button_settings['amount'] = $amount*100;  // Stripe needs cents (Rappen) as value
        $stripe_buttons[$button_id] = $button_settings;

        // create button render array
        $element[$delta] = array(
          '#theme' => 'stripe_button_fix_value',
          '#id' => $button_id,
          '#amount' => $amount,
          '#currency' => $button_settings['currency'],
          '#csp' => false,
        );
      }
      break;
    case 'stripe_button_custom':
      foreach ($items as $delta => $item) {
        // prevent more than one item for customizable button
        //if ($delta > 0) break;

        // set button specific values
        $amount = $item['value']; // default value possibly changed by user
        $button_id = drupal_clean_css_identifier($field_name . '-' . $delta);

        // add button with its  (no amount set)
        //$button_settings['amount'] = $amount*100;  // Stripe needs cents (Rappen) as value
        $stripe_buttons[$button_id] = $button_settings;
        $custom_buttons[$button_id] = $button_settings['currency'];

        // create button render array
        $element[$delta] = array(
          '#theme' => 'stripe_button_custom_value',
          '#id' => $button_id,
          '#amount' => $amount,
          '#currency' => $button_settings['currency'],
          '#csp' => false,
        );
      }
      break;
  }

  // add javascript files including the external Stripe Checkout library
  $path = drupal_get_path('module', 'stripe_button');
  drupal_add_js(STRIPE_CHECKOUT_JS_PATH, 'external');
  drupal_add_js($path . '/js/stripe_button.js');

  // add Drupal js settings (Drupal settings are merged for multiple buttons)
  $js_settings['stripe_button']['stripe_buttons'] = $stripe_buttons;
  $js_settings['stripe_button']['custom_buttons'] = $custom_buttons;
  drupal_add_js($js_settings, 'setting');

  return $element;
}


/* =============================================================================
 *   Hook implementations
 * ========================================================================== */
/**
 * Implements hook_stripe_account_alter().
 */
function stripe_button_stripe_account_alter(&$account) {
  // return the account depending on the set language
  global $language;
  if ($language->language == 'fr') {
    $account = 'second';
  }
  else {
    $account = 'default';
  }
}
